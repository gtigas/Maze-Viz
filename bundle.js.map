{"version":3,"sources":["webpack/bootstrap a53a4273bd3d88515695","./lib/entry.js","./lib/maze.js","./lib/cell.js","./lib/binders.js","./lib/dfs-generator.js","./lib/prims-generator.js","./lib/dfs-solver.js","./lib/bfs-solver.js","./lib/util.js","./lib/grid-generator.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DkB;;AAElB;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;ACND;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE,GAAG,EAAE,GAAG,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AC3GA;AACA;AACA;AACA;AACA;AACA;AAC4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC5EwB;;;AAGxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;;;;AAIA;;AAEA;;;;;;;;;AC3CwB;;;AAGxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;;AAEA;;;;;;;;;;AC3CwB;AACQ;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;;;;;;;;;ACtDwB;AACQ;;;AAGhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;;;;;;;ACvDA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACZwB;AACJ;AACI;;AAExB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,qBAAqB,oBAAoB;AACzC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a53a4273bd3d88515695","import { bindAll } from './binders'\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementById(\"canvas\");\n  const ctx = canvasEl.getContext(\"2d\");\n  bindAll(ctx);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/entry.js\n// module id = 0\n// module chunks = 0","import Cell from './cell'\n\nclass Maze {\n  constructor(ctx, size){\n    this.opts = SIZE_OPTIONS[size]\n    this.ctx = ctx\n    this.width = this.opts.width\n    this.height = this.opts.height\n    this.getCell = this.getCell.bind(this)\n    this.reset = this.reset.bind(this)\n    this._populateGrid = this._populateGrid.bind(this)\n    this.grid = this._populateGrid();\n    this.start = this.getCell([0,0])\n  }\n\n  _populateGrid(){\n    const grid = new Array(this.height)\n    for (var i = 0; i < this.height; i++) {\n      grid[i] = new Array(this.width)\n      for (var j = 0; j < this.width; j++) {\n        let cellOffset = this.opts.cellSize + this.opts.wallSize\n        let renderPositionX = ((j * cellOffset) + this.opts.mazeOffset[0])\n        let renderPositionY = ((i * cellOffset) + this.opts.mazeOffset[1])\n        grid[i][j] = new Cell([i,j], renderPositionX, renderPositionY, this.ctx, this);\n      }\n    }\n    return grid\n  }\n\n  reset(size){\n    this.opts = SIZE_OPTIONS[size]\n    this.width = this.opts.width\n    this.height = this.opts.height\n    this.grid = this._populateGrid();\n    this.start = this.getCell([0,0])\n    this.end = this.getCell([this.height-1, this.width-1])\n  }\n\n  unSolve(){\n    this.allCells().forEach( cell => {\n      cell.parent = null\n      cell.path = false;\n      cell.visited = false\n      cell.draw();\n    })\n  }\n\n  getCell(pos){\n    let [x, y] = pos\n    return this.grid[x][y]\n  }\n\n  randomize(opt){\n    const allCells = this.allCells();\n    if (opt === 'both') {\n      this.start = allCells[Math.floor(Math.random() * allCells.length)]\n      this.end = allCells[Math.floor(Math.random() * allCells.length)]\n    } else {\n      this[opt] = allCells[Math.floor(Math.random() * allCells.length)]\n    }\n    this.draw('solve')\n  }\n\n  draw(opt){\n    this.allCells().forEach( cell => cell.draw() )\n    const cellSize = this.opts.cellSize\n    if (opt === 'solve') {\n      this.ctx.fillStyle = 'green'\n      this.ctx.fillRect(this.start.xPosRender, this.start.yPosRender, cellSize, cellSize);\n      this.ctx.fillStyle = 'red'\n      this.ctx.fillRect(this.end.xPosRender, this.end.yPosRender, cellSize, cellSize);\n    }\n  }\n\n  allCells(){\n    return [].concat(...this.grid)\n  }\n}\n\nconst SIZE_OPTIONS = {\n  'large' : {\n    height: 29,\n    width: 48,\n    cellSize: 13,\n    wallSize: 3,\n    mazeOffset: [6,8]\n  },\n  'medium' : {\n    height: 19,\n    width: 31,\n    cellSize: 20,\n    wallSize: 5,\n    mazeOffset: [5,5]\n  },\n\n  'small' : {\n    height: 13,\n    width: 21,\n    cellSize: 30,\n    wallSize: 7,\n    mazeOffset: [5,3]\n  },\n}\n\nexport default Maze\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/maze.js\n// module id = 1\n// module chunks = 0","class Cell {\n  constructor(pos, x, y, ctx, maze){\n    this.created = false;\n    this.visited = false;\n    this.path = false;\n    this.start = false;\n    this.end = false;\n    this.pos = pos;\n    this.parent = null;\n    this.xPosRender = x;\n    this.yPosRender = y;\n    this.i = 1;\n    this.connectedCells = [];\n    this.ctx = ctx;\n    this.maze = maze;\n    this.neighbors = this.neighbors.bind(this)\n    this._checkNeighborPath = this._checkNeighborPath.bind(this)\n    this._breakDownWalls = this._breakDownWalls.bind(this)\n  }\n\n  neighbors(){\n    const neighbors = [];\n    Object.keys(DIRS).forEach( dir =>{\n      let neighborPos = [this.pos[0] +  DIRS[dir][0], this.pos[1] + DIRS[dir][1]]\n      if (this._isInvalidPosition(neighborPos)) return;\n\n      let neighbor = this.maze.getCell(neighborPos);\n      neighbors.push(neighbor)\n    });\n\n    return neighbors\n  }\n\n  unvisitedNeighbors(type){\n    return this.neighbors().filter( neighbor => {\n      return neighbor[type] === false\n    });\n  }\n  mazeNeighbors(){\n    return this.neighbors().filter( neighbor => {\n      return neighbor.created === true\n    });\n  }\n\n  unvisitedConnectedCells(){\n    return this.connectedCells.filter( neighbor => {\n      return neighbor.visited === false\n    });\n  }\n\n  connectPath(otherCell){\n    this.connectedCells.push(otherCell)\n    otherCell.connectedCells.push(this)\n  }\n\n  draw(){\n    if (this.created) {\n      this.ctx.fillStyle = 'white'\n    } else {\n      this.ctx.fillStyle = \"rgba(0, 0, 200, 0)\"\n    }\n    if (this.visited) {\n      const g = 240 - Math.floor(this.i * 0.439)\n      const b =  Math.floor(this.i * 0.439)\n      const r = Math.floor(this.i * 0.14)\n      this.ctx.fillStyle = `rgba(${r},${g},${b},1)`\n    }\n    if (this.path) {\n      this.ctx.fillStyle = 'yellow'\n    }\n    if (this.head) {\n      this.ctx.fillStyle = 'red'\n    }\n    this._breakDownWalls();\n    const cellSize = this.maze.opts.cellSize\n    this.ctx.fillRect(this.xPosRender, this.yPosRender, cellSize, cellSize);\n  }\n\n  _breakDownWalls(){\n    const { cellSize, wallSize } = this.maze.opts\n    if (this._checkNeighborPath('S')) {\n      this.ctx.fillRect(this.xPosRender, (this.yPosRender + cellSize), cellSize, wallSize);\n    }\n    if (this._checkNeighborPath('E')) {\n      this.ctx.fillRect(this.xPosRender + cellSize, this.yPosRender, wallSize, cellSize);\n    }\n  }\n\n  _checkNeighborPath(dir){\n    const neighborPos = [this.pos[0] +  DIRS[dir][0], this.pos[1] + DIRS[dir][1]]\n    return this.connectedCells.some( cell => {\n      return cell.pos.toString() === neighborPos.toString()\n    })\n  }\n\n  _isInvalidPosition(pos){\n    return ((pos[0] < 0 || pos[0] > (this.maze.height - 1)) || (pos[1] < 0 || pos[1] > (this.maze.width - 1)))\n  }\n}\n\nconst DIRS = {\n  'N': [-1,0],\n  'E': [0,1],\n  'S': [1,0],\n  'W': [0,-1],\n}\n\nexport default Cell\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/cell.js\n// module id = 2\n// module chunks = 0","import Maze from './maze'\nimport DFSGenerator from './dfs-generator'\nimport PrimsGenerator from './prims-generator'\nimport MatrixGenerator from './grid-generator'\nimport BFSSolver from './bfs-solver'\nimport DFSSolver from './dfs-solver'\nimport { resetPathDistance } from './util'\n\nexport const bindAll = ctx => {\n  const maze = new Maze(ctx, 'medium');\n  $('#generate').click( ()=>{\n    disableButtons();\n    const mazeSize = rangeText[$(\"#maze-size\").val()].toLowerCase();\n    maze.reset(mazeSize)\n    const generatorType = $(\"input[name='generator']:checked\").val();\n    let generator;\n    switch (generatorType) {\n      case 'prims':\n        generator = new PrimsGenerator(maze)\n        break;\n      case 'dfs':\n        generator = new DFSGenerator(maze)\n        break;\n      case 'matrix':\n        generator = new MatrixGenerator(maze)\n        break;\n    }\n    ctx.clearRect(0,0,780,480)\n    generator.generate();\n  })\n\n  $('#reset-button').click( ()=>{\n    maze.unSolve();\n  })\n\n  $('#solve').click( ()=>{\n    resetPathDistance();\n    disableButtons();\n    maze.unSolve();\n    const solverType = $(\"input[name='solver']:checked\").val();\n    let solver;\n    switch (solverType) {\n      case 'bfs':\n        solver = new BFSSolver(maze)\n        break;\n      case 'dfs':\n        solver = new DFSSolver(maze)\n        break;\n    }\n    solver.solve();\n  })\n\n  $('#random-both').click( ()=>{\n    resetPathDistance();\n    maze.unSolve();\n    maze.randomize('both')\n  })\n\n  $('#range-text').text(rangeText[$(\"#maze-size\").val()])\n  $('#maze-size').on('input change', () => {\n    $('#range-text').text(rangeText[$(\"#maze-size\").val()])\n  })\n}\n\nconst rangeText = {\n  '1' : 'Small',\n  '2' : 'Medium',\n  '3' : 'Large'\n}\n\nconst disableButtons = () => {\n  $(\"button\").prop('disabled', true)\n}\n\nexport const enableButtons = () => {\n  $(\"button\").prop('disabled', false)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/binders.js\n// module id = 7\n// module chunks = 0","import { enableButtons } from './binders'\n\n\nclass DFSGenerator {\n  constructor(maze){\n    this.maze = maze\n    this.stack = [this.maze.getCell([0,0])]\n    this.visitedCells = 1\n    this.generate = this.generate.bind(this)\n    this.stack[0].created = true\n  }\n\n  generate(){\n    if (this.visitedCells === ((this.maze.width) * (this.maze.height))) {\n      this.maze.draw('solve');\n      enableButtons();\n      return\n    }\n    setTimeout( () => {\n      this.maze.draw()\n      let currentCell = this.stack[0]\n      currentCell.head = true\n      let unvisitedNeighbors = currentCell.unvisitedNeighbors('created')\n      if (unvisitedNeighbors.length > 0) {\n        let randomCell = unvisitedNeighbors[Math.floor(Math.random() * unvisitedNeighbors.length)]\n        this.stack.unshift(randomCell)\n        currentCell.connectPath(randomCell)\n        currentCell.head = false\n        currentCell = randomCell\n        currentCell.created = true\n        this.visitedCells++\n      } else {\n        this.stack.shift().head = false;\n        this.stack[0].head = true;\n      }\n      this.generate();\n    }, 0)\n  }\n\n\n\n}\n\nexport default DFSGenerator\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dfs-generator.js\n// module id = 8\n// module chunks = 0","import { enableButtons } from './binders'\n\n\nclass PrimsGenerator {\n  constructor(maze){\n    this.maze = maze\n    this.frontier = maze.start.unvisitedNeighbors('created')\n    this.generate = this.generate.bind(this)\n    this.maze.start.created = true\n  }\n\n  generate(){\n    if (this.frontier.length === 0) {\n      this.maze.draw('solve')\n      enableButtons();\n      return\n    }\n    setTimeout( () => {\n      if (this.frontier.length > 0) {\n        let randomCell = this.frontier.splice([Math.floor(Math.random() * this.frontier.length)], 1)[0]\n        randomCell.head = true\n        this.maze.draw(); \n        let mazeNeighbors = randomCell.mazeNeighbors();\n        let randomMazeNeighbor = mazeNeighbors[Math.floor(Math.random() * mazeNeighbors.length)]\n        randomCell.connectPath(randomMazeNeighbor)\n        randomCell.parent = randomMazeNeighbor\n        randomCell.created = true\n        const unvisitedNeighbors = randomCell.unvisitedNeighbors('created')\n        unvisitedNeighbors.forEach( cell => {\n          this.frontier = this.frontier.filter( frontier => {\n            return frontier.pos.toString() !== cell.pos.toString()\n          })\n        })\n        this.frontier = this.frontier.concat(unvisitedNeighbors)\n        randomCell.head = false\n        this.generate()\n      }\n    }, 0)\n  }\n\n\n}\n\nexport default PrimsGenerator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/prims-generator.js\n// module id = 9\n// module chunks = 0","import { enableButtons } from './binders'\nimport { incrementPathDistance } from './util'\n\nclass DFSSolver {\n  constructor(maze){\n    this.maze = maze\n    this.stack = [maze.start]\n    this.solve = this.solve.bind(this)\n    this.colorPath = this.colorPath.bind(this)\n  }\n\n  colorPath(cell) {\n    if (!cell) {\n      return\n    }\n    setTimeout( () => {\n      cell.path = true;\n      cell.draw()\n      this.colorPath(cell.parent)\n      incrementPathDistance();\n    }, 2)\n  }\n\n  solve(i = 1){\n    if (this.solved) {\n      return\n    }\n    setTimeout( () => {\n      if (this.stack.length > 0) {\n        let currentCell = this.stack.shift()\n        currentCell.head = true;\n        this.maze.draw('solve');\n        if (!currentCell.visited) {\n          currentCell.visited = true\n          currentCell.i = i\n          let connectedNeighbors = currentCell.unvisitedConnectedCells()\n          connectedNeighbors.forEach( cell => cell.parent = currentCell)\n          this.stack = connectedNeighbors.concat(this.stack)\n        }\n        currentCell.head = false;\n        if (this.maze.end === currentCell) {\n          this.colorPath(this.maze.end)\n          enableButtons();\n          this.solved = true\n        } else {\n          i++\n          this.solve(i);\n        }\n      }\n    }, 0)\n\n  }\n}\n\nexport default DFSSolver\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dfs-solver.js\n// module id = 10\n// module chunks = 0","import { enableButtons } from './binders'\nimport { incrementPathDistance } from './util'\n\n\nclass BFSSolver {\n  constructor(maze){\n    this.maze = maze\n    this.queue = [maze.start]\n    this.solve = this.solve.bind(this)\n    this.colorPath = this.colorPath.bind(this)\n  }\n\n  colorPath(cell) {\n    if (!cell) {\n      return\n    }\n    setTimeout( () => {\n      cell.path = true;\n      cell.draw()\n      this.colorPath(cell.parent)\n      incrementPathDistance();\n    }, 2)\n  }\n\n  solve(i = 1){\n    if (this.solved) {\n      return\n    }\n    setTimeout( () => {\n      if (this.queue.length > 0) {\n        let currentCell = this.queue.shift()\n        currentCell.head = true;\n        this.maze.draw('solve');\n        if (!currentCell.visited) {\n          currentCell.visited = true\n          currentCell.i = i\n          let connectedNeighbors = currentCell.unvisitedConnectedCells()\n          connectedNeighbors.forEach( cell => cell.parent = currentCell)\n          this.queue = this.queue.concat(connectedNeighbors)\n        }\n        currentCell.head = false;\n        if (this.maze.end === currentCell) {\n          this.colorPath(this.maze.end)\n          enableButtons();\n          this.solved = true\n        } else {\n          i++\n          this.solve(i);\n        }\n      }\n    }, 0)\n\n  }\n}\n\nexport default BFSSolver\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bfs-solver.js\n// module id = 11\n// module chunks = 0","export const resetPathDistance  = () => {\n  $(\"#path\").text(\"0\")\n}\n\nexport const incrementPathDistance = () => {\n  let currentDistance = parseInt($(\"#path\").text())\n  currentDistance++\n  $(\"#path\").text(currentDistance)\n}\n\n// Source: femto113 via github\n// https://gist.github.com/femto113/1784503\nexport const transpose = (a) => a[0].map((_, c) => a.map(r => r[c]));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 12\n// module chunks = 0","import { enableButtons } from './binders'\nimport { transpose } from './util'\nimport { enableButtons } from './binders'\n\nclass MatrixGenerator {\n  constructor(maze) {\n    this.maze = maze\n  }\n\n  generate() {\n    const rows = this.maze.grid\n    const cols = transpose(this.maze.grid)\n    console.log(rows);\n    console.log(cols);\n    rows.forEach( row => {\n      for (var i = 0; i < row.length - 1; i++) {\n        let cell = row[i]\n        cell.connectPath(row[i + 1])\n        cell.created = true\n        cell.draw()\n        if (i === row.length - 2) {\n          let lastCell = row[i + 1]\n          lastCell.created = true\n          lastCell.draw()\n        }\n      }\n    })\n\n    cols.forEach( (col, colIdx) => {\n      for (var i = 0; i < col.length - 1; i++) {\n        if (colIdx % 2 === 0) { continue }\n        let cell = col[i]\n        cell.connectPath(col[i + 1])\n        cell.created = true\n        cell.draw()\n        if (i === col.length - 2) {\n          let lastCell = col[i + 1]\n          lastCell.created = true\n          lastCell.draw()\n        }\n      }\n    })\n    this.maze.draw('solve');\n    enableButtons();\n  }\n}\n\nexport default MatrixGenerator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/grid-generator.js\n// module id = 13\n// module chunks = 0"],"sourceRoot":""}